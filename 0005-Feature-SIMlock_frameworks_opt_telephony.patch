From 3511ebb47209517b509a8cfef4e6b6e8b6aa7458 Mon Sep 17 00:00:00 2001
From: CaoBo <bo.cao@sim.com>
Date: Wed, 8 May 2019 17:45:06 +0800
Subject: [PATCH] [Feature][SIMlock] Add query SIMlock status API. Part 5.

Project:
[Lily]

Layer:
Framework telephony

Test:
Sucessfully build.

Change-Id: I020bf2eaaecfec97d678dbe23688f82d6de56e43
---
 .../internal/telephony/CommandsInterface.java      |  3 ++
 .../android/internal/telephony/GsmCdmaPhone.java   |  1 +
 .../com/android/internal/telephony/IccCard.java    |  3 ++
 src/java/com/android/internal/telephony/Phone.java |  5 ++
 src/java/com/android/internal/telephony/RIL.java   | 55 ++++++++++++++++++++++
 .../android/internal/telephony/RadioResponse.java  | 28 +++++++++++
 .../internal/telephony/imsphone/ImsPhoneBase.java  |  5 ++
 .../imsphone/ImsPhoneCommandInterface.java         |  4 ++
 .../telephony/sip/SipCommandInterface.java         |  4 ++
 .../internal/telephony/sip/SipPhoneBase.java       |  5 ++
 .../internal/telephony/test/SimulatedCommands.java |  6 +++
 .../telephony/test/SimulatedCommandsVerifier.java  |  4 ++
 .../internal/telephony/uicc/IccCardProxy.java      |  6 +++
 13 files changed, 129 insertions(+)

diff --git a/src/java/com/android/internal/telephony/CommandsInterface.java b/src/java/com/android/internal/telephony/CommandsInterface.java
index 56fcc2f..f2a8441 100644
--- a/src/java/com/android/internal/telephony/CommandsInterface.java
+++ b/src/java/com/android/internal/telephony/CommandsInterface.java
@@ -2151,6 +2151,9 @@ public interface CommandsInterface {
      * @param h Handler for notificaiton message.
      */
     void unregisterForNetworkScanResult(Handler h);
+    
+    //Simlock Status API, Cao Bo, 2019-4
+    void getNetworkPersonalizationStatus(Message response);
 
     default public List<ClientRequestStats> getClientRequestStats() {
         return null;
diff --git a/src/java/com/android/internal/telephony/GsmCdmaPhone.java b/src/java/com/android/internal/telephony/GsmCdmaPhone.java
index a7f3e01..df1bc12 100644
--- a/src/java/com/android/internal/telephony/GsmCdmaPhone.java
+++ b/src/java/com/android/internal/telephony/GsmCdmaPhone.java
@@ -3676,4 +3676,5 @@ public class GsmCdmaPhone extends Phone {
         }
         return result;
     }
+
 }
diff --git a/src/java/com/android/internal/telephony/IccCard.java b/src/java/com/android/internal/telephony/IccCard.java
index e5b34e2..5db4751 100644
--- a/src/java/com/android/internal/telephony/IccCard.java
+++ b/src/java/com/android/internal/telephony/IccCard.java
@@ -231,4 +231,7 @@ public interface IccCard {
      * @return true if ICC card is PUK2 blocked
      */
     public boolean getIccPuk2Blocked();
+    
+    //Simlock status API,Caobo 2019-4
+    public void getNetworkPersonalizationStatus(Message response);
 }
diff --git a/src/java/com/android/internal/telephony/Phone.java b/src/java/com/android/internal/telephony/Phone.java
index 61f965a..187eb0f 100644
--- a/src/java/com/android/internal/telephony/Phone.java
+++ b/src/java/com/android/internal/telephony/Phone.java
@@ -3790,4 +3790,9 @@ public abstract class Phone extends Handler implements PhoneInternalInterface {
             pw.println("++++++++++++++++++++++++++++++++");
         }
     }
+
+    public void   
+    getNetworkPersonalizationStatus(Message response){
+        mCi.getNetworkPersonalizationStatus(response);
+    }
 }
diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index e48537f..7eed491 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -111,6 +111,7 @@ import java.util.concurrent.atomic.AtomicLong;
  * {@hide}
  */
 
+
 class RILRequest {
     static final String LOG_TAG = "RilRequest";
 
@@ -3991,6 +3992,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         // Here and below fake RIL_UNSOL_RESPONSE_SIM_STATUS_CHANGED, see b/7255789.
         // This is needed otherwise we don't automatically transition to the main lock
         // screen when the pin or puk is entered incorrectly.
+        Object ret = null;
         switch (rr.mRequest) {
             case RIL_REQUEST_ENTER_SIM_PUK:
             case RIL_REQUEST_ENTER_SIM_PUK2:
@@ -4005,6 +4007,9 @@ public class RIL extends BaseCommands implements CommandsInterface {
             case RIL_REQUEST_SHUTDOWN:
                 setRadioState(RadioState.RADIO_UNAVAILABLE);
                 break;
+            case RIL_REQUEST_GET_PERSONALIZATION_STATUS_REQ:                
+                //ret =  getPersonalizationStatusResponse(p); 
+                break;
         }
 
         if (error != RadioError.NONE) {
@@ -4022,6 +4027,16 @@ public class RIL extends BaseCommands implements CommandsInterface {
                         mIccStatusChangedRegistrants.notifyRegistrants();
                     }
                     break;
+                case RIL_REQUEST_GET_PERSONALIZATION_STATUS_REQ: {
+                    if (REQUEST_NOT_SUPPORTED == error ||
+                            GENERIC_FAILURE == error) {
+                        // we should construct the RAF bitmask the radio
+                        // supports based on preferred network bitmasks
+                        ret = new PersonalizationStatus(0, 0, 0);
+                        error = 0;
+                    }
+                    break;
+                }
 
             }
         } else {
@@ -4758,6 +4773,8 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 return "RIL_REQUEST_START_NETWORK_SCAN";
             case RIL_REQUEST_STOP_NETWORK_SCAN:
                 return "RIL_REQUEST_STOP_NETWORK_SCAN";
+            case RIL_REQUEST_GET_PERSONALIZATION_STATUS_REQ:
+                    return "RIL_REQUEST_GET_PERSONALIZATION_STATUS_REQ";
             default: return "<unknown request>";
         }
     }
@@ -5134,4 +5151,42 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 signalStrength.tdScdma.rscp,
                 false /* gsmFlag - don't care; will be changed by SST */);
     }
+
+    @Override
+    public void
+    getNetworkPersonalizationStatus(Message response) {
+        
+
+        IRadio radioProxy = getRadioProxy(response);
+        Rlog.d(RILJ_LOG_TAG, "sim-lock,getNetworkPersonalizationStatus,radioProxy =" + radioProxy);
+        if (radioProxy != null) {
+            RILRequest rr = obtainRequest(RIL_REQUEST_GET_PERSONALIZATION_STATUS_REQ, response,
+                    mRILDefaultWorkSource);
+
+            if (RILJ_LOGD) {
+                riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
+            }
+
+            try {
+                radioProxy.getNetworkPersonalizationStatus(rr.mSerial);
+            } catch (RemoteException | RuntimeException e) {
+                handleRadioProxyExceptionForRR(rr, "getNetworkPersonalizationStatus", e);
+            }
+        }
+		
+    }
+
+    /*private Object
+    getPersonalizationStatusResponse(Parcel p) {
+        int islock = p.readInt();
+        int locktype = p.readInt();
+        int verifyAttempts = p.readInt();
+
+        riljLog("getPersonalizationStatusResponse: islock= " + islock +
+                ", locktype=" + locktype +
+                ", verifyAttempts=" + verifyAttempts);
+        PersonalizationStatus rc = new PersonalizationStatus(islock, locktype, verifyAttempts);
+		
+        return rc;
+    }*/
 }
diff --git a/src/java/com/android/internal/telephony/RadioResponse.java b/src/java/com/android/internal/telephony/RadioResponse.java
index 93c3985..e01f6ba 100644
--- a/src/java/com/android/internal/telephony/RadioResponse.java
+++ b/src/java/com/android/internal/telephony/RadioResponse.java
@@ -33,6 +33,7 @@ import android.hardware.radio.V1_0.RadioResponseInfo;
 import android.hardware.radio.V1_0.SendSmsResult;
 import android.hardware.radio.V1_0.SetupDataCallResult;
 import android.hardware.radio.V1_0.VoiceRegStateResult;
+import android.hardware.radio.V1_0.SimlockStatus;
 import android.hardware.radio.V1_1.IRadioResponse;
 import android.hardware.radio.V1_1.KeepaliveStatus;
 import android.os.AsyncResult;
@@ -1823,4 +1824,31 @@ public class RadioResponse extends IRadioResponse.Stub {
             mRil.processResponseDone(rr, responseInfo, ret);
         }
     }
+
+    private void responsePersonalizationStatusInternal(RadioResponseInfo responseInfo,
+                                              SimlockStatus simLockInfo){
+         RILRequest rr = mRil.processResponse(responseInfo);
+
+        if (rr != null) {
+            PersonalizationStatus ret = null;
+            if (responseInfo.error == RadioError.NONE) {
+                int islock = simLockInfo.islock;
+                int locktype = simLockInfo.locktype;
+                int verifyAttempts = simLockInfo.verifyAttempts;
+                ret = new PersonalizationStatus(islock,locktype,verifyAttempts);
+            } else {
+                ret = new PersonalizationStatus(0, 0, 0);
+                responseInfo.error = RadioError.NONE;
+            }
+            sendMessageResponse(rr.mResult, ret);
+            mRil.processResponseDone(rr, responseInfo, ret);
+        }
+    }
+    
+    public void getPersonalizationStatusResponse(RadioResponseInfo responseInfo,
+                                              SimlockStatus simLockInfo) {
+        responsePersonalizationStatusInternal(responseInfo, simLockInfo);
+    }
+
+    
 }
diff --git a/src/java/com/android/internal/telephony/imsphone/ImsPhoneBase.java b/src/java/com/android/internal/telephony/imsphone/ImsPhoneBase.java
index c165b03..9ae6e2c 100644
--- a/src/java/com/android/internal/telephony/imsphone/ImsPhoneBase.java
+++ b/src/java/com/android/internal/telephony/imsphone/ImsPhoneBase.java
@@ -556,4 +556,9 @@ abstract class ImsPhoneBase extends Phone {
             notifyPhoneStateChanged();
         }
     }
+
+    @Override
+    public void
+    getNetworkPersonalizationStatus(Message response){
+    }
 }
diff --git a/src/java/com/android/internal/telephony/imsphone/ImsPhoneCommandInterface.java b/src/java/com/android/internal/telephony/imsphone/ImsPhoneCommandInterface.java
index 60a50b9..1886b98 100644
--- a/src/java/com/android/internal/telephony/imsphone/ImsPhoneCommandInterface.java
+++ b/src/java/com/android/internal/telephony/imsphone/ImsPhoneCommandInterface.java
@@ -648,4 +648,8 @@ class ImsPhoneCommandInterface extends BaseCommands implements CommandsInterface
     @Override
     public void setSimCardPower(int state, Message result) {
     }
+    
+    @Override    
+    public void getNetworkPersonalizationStatus(Message response){
+    }
 }
diff --git a/src/java/com/android/internal/telephony/sip/SipCommandInterface.java b/src/java/com/android/internal/telephony/sip/SipCommandInterface.java
index fe1d7c5..b0661d5 100644
--- a/src/java/com/android/internal/telephony/sip/SipCommandInterface.java
+++ b/src/java/com/android/internal/telephony/sip/SipCommandInterface.java
@@ -650,4 +650,8 @@ class SipCommandInterface extends BaseCommands implements CommandsInterface {
     @Override
     public void setSimCardPower(int state, Message result) {
     }
+    @Override    
+
+    public void getNetworkPersonalizationStatus(Message response){
+    }
 }
diff --git a/src/java/com/android/internal/telephony/sip/SipPhoneBase.java b/src/java/com/android/internal/telephony/sip/SipPhoneBase.java
index 7bdfad8..c3d068b 100755
--- a/src/java/com/android/internal/telephony/sip/SipPhoneBase.java
+++ b/src/java/com/android/internal/telephony/sip/SipPhoneBase.java
@@ -547,4 +547,9 @@ abstract class SipPhoneBase extends Phone {
     @Override
     public void setBroadcastEmergencyCallStateChanges(boolean broadcast) {
     }
+
+    @Override
+    public void
+    getNetworkPersonalizationStatus(Message response){
+    }
 }
diff --git a/src/java/com/android/internal/telephony/test/SimulatedCommands.java b/src/java/com/android/internal/telephony/test/SimulatedCommands.java
index 9269a61..aae8737 100644
--- a/src/java/com/android/internal/telephony/test/SimulatedCommands.java
+++ b/src/java/com/android/internal/telephony/test/SimulatedCommands.java
@@ -2179,4 +2179,10 @@ public class SimulatedCommands extends BaseCommands
     public void getAtr(Message response) {
         unimplemented(response);
     }
+    
+    @Override
+    public void getNetworkPersonalizationStatus(Message result){
+           unimplemented(result);
+    }
+    
 }
diff --git a/src/java/com/android/internal/telephony/test/SimulatedCommandsVerifier.java b/src/java/com/android/internal/telephony/test/SimulatedCommandsVerifier.java
index 4c42bc0..071fca5 100644
--- a/src/java/com/android/internal/telephony/test/SimulatedCommandsVerifier.java
+++ b/src/java/com/android/internal/telephony/test/SimulatedCommandsVerifier.java
@@ -1412,4 +1412,8 @@ public class SimulatedCommandsVerifier implements CommandsInterface {
     @Override
     public void getAtr(Message response) {
     }
+
+    @Override
+    public void getNetworkPersonalizationStatus(Message response){
+    }
 }
diff --git a/src/java/com/android/internal/telephony/uicc/IccCardProxy.java b/src/java/com/android/internal/telephony/uicc/IccCardProxy.java
index b8e4e82..da36088 100644
--- a/src/java/com/android/internal/telephony/uicc/IccCardProxy.java
+++ b/src/java/com/android/internal/telephony/uicc/IccCardProxy.java
@@ -982,4 +982,10 @@ public class IccCardProxy extends Handler implements IccCard {
 
         pw.flush();
     }
+    
+    @Override
+    public void
+    getNetworkPersonalizationStatus(Message response) {
+       return;
+    }
 }
-- 
2.7.4

